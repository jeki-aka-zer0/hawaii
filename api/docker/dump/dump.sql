insert into public.entity (entity_id, updated_at, name, description, created_at)
values  ('9fe96469-a845-416a-aa8f-d418e2469184', '2023-12-04 14:10:58', 'CGI', 'protocol for interaction between the web server and the application carried out via STDIN and STDOUT. A process is created and dies every time it is accessed.', '2023-12-04 14:10:58'),
        ('d8740a94-cc22-4caf-aa89-ad6bbb2f15b7', '2023-12-04 14:11:25', 'FastCGI', 'communication between client and server is carried out via Unix Sockets or via TCP/IP. Thanks to the demon, the process lives forever.', '2023-12-04 14:11:25'),
        ('2fb802c0-7baa-4fbd-a51d-5ffec986b95f', '2023-12-04 14:11:58', 'Event sourcing', 'an approach to handling operations on data that''s driven by a sequence of events, each of which is recorded in an append-only store.', '2023-12-04 14:11:58'),
        ('e8671c37-1281-466d-ba24-94c468e2c5d5', '2023-12-04 14:12:35', 'Flaky test', 'test that yields both passing and failing results despite zero changes to the code or test. In other words, flaky tests fail to produce the same outcome with each individual test run.', '2023-12-04 14:12:35'),
        ('6007c54c-12ad-4b08-ad8b-8b12405c6405', '2023-12-04 14:12:51', 'Graceful degradation', 'the property of a system where it continues to perform its primary function even if a significant part of the system has failed. Example: you can order a taxi when the chat with the driver has failed.', '2023-12-04 14:12:51'),
        ('e4001651-68e5-4d6e-976a-dd618c3bba06', '2023-12-11 10:38:00', 'PostgreSQL character types', 'character varying(n), varchar(n): variable-length with limit to n characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length (SQL standard). If these fields are used without length specifier, the type accepts strings of any length. character(n), char(n), bpchar(n): fixed-length, blank-padded; bpchar: variable unlimited length, blank-trimmed; text: variable unlimited length.
                                                                                                      The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of character. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB.
                                                                                                      There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While character(n) has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact character(n) is usually the slowest of the three because of its additional storage costs. In most situations text or character varying should be used instead.
                                                                                                      More https://www.postgresql.org/docs/current/datatype-character.html', '2023-12-11 10:38:00');

insert into public.attribute (attribute_id, updated_at, name, created_at, type)
values  ('313eef01-1d08-4d7a-aa22-3809fa9bb854', '2023-12-04 14:10:59', 'Category', '2023-12-04 14:10:59', 0);

insert into public.value (value_id, entity_id, attribute_id, updated_at, created_at, value)
values  ('a9392469-b40a-48d5-9167-0b9e29831219', '9fe96469-a845-416a-aa8f-d418e2469184', '313eef01-1d08-4d7a-aa22-3809fa9bb854', '2023-12-04 14:10:59', '2023-12-04 14:10:59', 'Programming'),
        ('7a18ecaa-1c56-4ef8-ab69-7fec63047730', 'd8740a94-cc22-4caf-aa89-ad6bbb2f15b7', '313eef01-1d08-4d7a-aa22-3809fa9bb854', '2023-12-04 14:11:25', '2023-12-04 14:11:25', 'Programming'),
        ('e0c3958f-3c0d-4b51-8bb5-d7db65a220a9', '2fb802c0-7baa-4fbd-a51d-5ffec986b95f', '313eef01-1d08-4d7a-aa22-3809fa9bb854', '2023-12-04 14:11:58', '2023-12-04 14:11:58', 'Programming'),
        ('be09cf60-2468-4119-ad14-bdfe56ecdddb', 'e8671c37-1281-466d-ba24-94c468e2c5d5', '313eef01-1d08-4d7a-aa22-3809fa9bb854', '2023-12-04 14:12:35', '2023-12-04 14:12:35', 'Programming'),
        ('23eb53a4-1e32-4c11-bd6b-fe75d1411638', '6007c54c-12ad-4b08-ad8b-8b12405c6405', '313eef01-1d08-4d7a-aa22-3809fa9bb854', '2023-12-04 14:12:51', '2023-12-04 14:12:51', 'Programming'),
        ('d0ae848f-cdbf-4950-bdda-3340fd5cb7c6', 'e4001651-68e5-4d6e-976a-dd618c3bba06', '313eef01-1d08-4d7a-aa22-3809fa9bb854', '2023-12-11 10:38:00', '2023-12-11 10:38:00', 'Programming');